// App.js naima gul (mad assignment 03)
import React, { useState, useEffect } from 'react';
import {
  Text,
  View,
  TextInput,
  StyleSheet,
  PermissionsAndroid,
  Platform,
} from 'react-native';
import Geolocation from '@react-native-community/geolocation';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createStackNavigator } from '@react-navigation/stack';

const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();

function HomeScreen() {
  const [city, setCity] = useState('Fetching...');

  useEffect(() => {
    const requestLocationPermission = async () => {
      try {
        if (Platform.OS === 'android') {
          const granted = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION
          );
          if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
            setCity('Permission denied');
            return;
          }
        }

        Geolocation.getCurrentPosition(
          async position => {
            const { latitude, longitude } = position.coords;
            const response = await fetch(
              `https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`
            );
            const data = await response.json();
            setCity(
              data.address.city ||
                data.address.town ||
                data.address.village ||
                'Unknown'
            );
          },
          error => {
            console.error(error);
            setCity('Location Error');
          },
          { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }
        );
      } catch (error) {
        console.error(error);
        setCity('Error getting location');
      }
    };

    requestLocationPermission();
  }, []);

  return (
    <View style={styles.center}>
      <Text style={styles.text}>Current City: {city}</Text>
    </View>
  );
}

function ProfileScreen({ route, navigation }) {
  const [name, setName] = useState(route.params?.name || '');

  useEffect(() => {
    navigation.setOptions({ title: name || 'Profile' });
  }, [name]);

  return (
    <View style={styles.center}>
      <Text style={styles.text}>Enter your name:</Text>
      <TextInput
        style={styles.input}
        placeholder="Your Name"
        placeholderTextColor="#aaa"
        value={name}
        onChangeText={text => setName(text)}
      />
      <View style={{ position: 'absolute', bottom: 40 }}>
        <Text style={[styles.text, { fontSize: 16, color: '#aaa' }]}>
          {name ? `Hello, ${name}` : ''}
        </Text>
      </View>
    </View>
  );
}

function SettingsScreen() {
  return (
    <View style={styles.center}>
      <Text style={styles.text}>Settings</Text>
    </View>
  );
}

function ProfileStack() {
  return (
    <Stack.Navigator
      screenOptions={{
        headerStyle: { backgroundColor: '#1D2233' },
        headerTintColor: '#4FC3F7',
      }}
    >
      <Stack.Screen name="Profile" component={ProfileScreen} />
    </Stack.Navigator>
  );
}

export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator
        screenOptions={{
          headerStyle: { backgroundColor: '#1D2233' },
          headerTintColor: '#4FC3F7',
          tabBarStyle: { backgroundColor: '#1D2233' },
          tabBarActiveTintColor: '#4FC3F7',
          tabBarInactiveTintColor: '#888',
        }}
      >
        <Tab.Screen name="Home" component={HomeScreen} />
        <Tab.Screen name="Profile" component={ProfileStack} />
        <Tab.Screen name="Settings" component={SettingsScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  center: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#0A0E21', 
  },
  text: {
    fontSize: 22,
    color: '#F5F5F5', 
    marginBottom: 18,
    fontWeight: '600',
    textAlign: 'center',
  },
  input: {
    width: '100%',
    padding: 14,
    borderWidth: 1.5,
    borderRadius: 12,
    borderColor: '#4FC3F7', 
    backgroundColor: '#1D2233', 
    color: '#FFFFFF',
    fontSize: 18,
    shadowColor: '#4FC3F7',
    shadowOffset: { width: 0, height: 3 },
    shadowOpacity: 0.3,
    shadowRadius: 6,
    elevation: 4,
  },
});
