import React, { useState } from 'react';
import { View, Text, SectionList, TextInput, TouchableOpacity, Modal, StyleSheet } from 'react-native';

const contactsData = [
  { name: 'Api',  number: '1234567890', group: 'Family' },
  { name: 'Haleema', number: '0123456789', group: 'Family' },
  { name: 'Daddy', number: '7890123456', group: 'Family' },
  { name: 'Bro', number: '4567890123', group: 'Family' },
  { name: 'Noor', number: '2345678901', group: 'Friends' },
  { name: 'Mahnoor', number: '5678901234', group: 'Friends' },
  { name: 'Eman', number: '8901234567', group: 'Friends' },
  { name: 'Hadia', number: '6789012345', group: 'Work' },
  { name: 'Iqra', number: '3456789012', group: 'Work' },
  { name: 'Arfa', number: '9012345678', group: 'Work' },
 
];

const groupContacts = (contacts) => {
  const groups = ['Family', 'Friends', 'Work'];
  return groups.map(group => ({
    title: group,
    data: contacts.filter(contact => contact.group === group)
  }));
};

export default function App() {
  const [search, setSearch] = useState('');
  const [selectedContact, setSelectedContact] = useState(null);

  const filteredContacts = contactsData.filter(contact =>
    contact.name.toLowerCase().includes(search.toLowerCase()) ||
    contact.number.includes(search)
  );

  const groupedContacts = groupContacts(filteredContacts);

  return (
    <View style={styles.container}>
      <Text style={styles.header}>  üìÅMy Contacts!</Text>
      <TextInput
        placeholder="Search by Name or Number"
        style={styles.searchBox}
        value={search}
        onChangeText={setSearch}
      />

      <SectionList
        sections={groupedContacts}
        keyExtractor={(item, index) => item.name + index}
        renderItem={({ item }) => (
          <TouchableOpacity
            style={styles.contactItem}
            onPress={() => setSelectedContact(item)}
          >
            <Text style={styles.contactText}>{item.name}</Text>
            <Text style={styles.contactText}>{item.number}</Text>
          </TouchableOpacity>
        )}
        renderSectionHeader={({ section: { title } }) => (
          <Text style={styles.sectionHeader}>{title}</Text>
        )}
      />

      <Modal
        visible={!!selectedContact}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setSelectedContact(null)}
      >
        <View style={styles.modalBackground}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Contact Details</Text>
            <Text>Name: {selectedContact?.name}</Text>
            <Text>Number: {selectedContact?.number}</Text>
            <Text>Group: {selectedContact?.group}</Text>
            <TouchableOpacity
              style={styles.closeButton}
              onPress={() => setSelectedContact(null)}
            >
              <Text style={styles.closeButtonText}>Close</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: 'white'
  },
  header: {
    fontSize: 26,
    fontWeight: 'bold',
    marginBottom: 13
  },
  searchBox: {
    borderWidth: 1,
    borderColor: 'black',
    padding: 10,
    borderRadius: 8,
    marginBottom: 16,
    fontcolor: 'white'
  
  },
  sectionHeader: {
    fontSize: 18,
    fontWeight: '600',
    backgroundColor: 'pink',
    paddingVertical: 6,
    paddingHorizontal: 10,
    marginTop: 10
  },
  contactItem: {
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: 'black',
  },
  contactText: {
    fontSize: 16
  },
  modalBackground: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'pink'
  },
  modalContent: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 16,
    width: 300,
    alignItems: 'center'
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10
  },
  closeButton: {
    marginTop: 20,
    backgroundColor: 'black',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 8
  },
  closeButtonText: {
    color: 'white',
    fontWeight: 'bold'
  }
});

